<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/dig.java" startline="13" endline="17">
static void usage () {
    System.out.println ("Usage: dig [@server] name [<type>] [<class>]");
    System.exit (0);
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/dig.java" startline="19" endline="30" key="MultiKey[7, 37]">
static void doQuery (Message query, Resolver res) throws IOException {
    Message response;
    System.out.println ("; java dig 0.0");
    response = res.send (query);
    if (response == null) return;

    System.out.println (response);
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/dnsServer.java" startline="145" endline="150" pcid="348" key="MultiKey[6, 22]">
public void
addUDP(final short port) {
	Thread t;
	t = new Thread(new Runnable() {public void run() {serveTCP(port);}});
	t.start();
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/jnamed.java" startline="145" endline="150" pcid="359" key="MultiKey[6, 22]">
public void
addUDP(final short port) {
	Thread tt;
	tt = new Thread(new Runnable() {public void run() {serveTCP(port);}});
	tt.start();
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/update.java" startline="257" endline="276" key="MultiKey[19, 27]">
void
doProhibit(MyStringTokenizer st) throws IOException {
	Record rec;

	String qualifier = st.nextToken();
	if (qualifier.equals("-r")) 
		rec = parseRR(st, defaultClass, 0);
	else if (qualifier.equals("-s"))
		rec = parseList(st, DClass.NONE);
	else if (qualifier.equals("-n"))
		rec = parseName(st, DClass.NONE);
	else {
		System.out.println("qualifier " + qualifier + " not supported");
		return;
	}
	if (rec != null) {
		query.addRecord(PREREQ, rec);
		System.out.println(rec);
	}
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/update.java" startline="236" endline="255" key="MultiKey[19, 26]">
void
doRequire(MyStringTokenizer st) throws IOException {
	Record rec;

	String qualifier = st.nextToken();
	if (qualifier.equals("-r")) 
		rec = parseRR(st, defaultClass, 0);
	else if (qualifier.equals("-s"))
		rec = parseSet(st, DClass.ANY);
	else if (qualifier.equals("-n"))
		rec = parseName(st, DClass.ANY);
	else {
		System.out.println("qualifier " + qualifier + " not supported");
		return;
	}
	if (rec != null) {
		query.addRecord(PREREQ, rec);
		System.out.println(rec);
	}
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/update.java" startline="216" endline="235" key="MultiKey[17, 31]">
void
doRequire(MyStringTokenizer st) throws IOException {
	Record rec;

	String qualifier = st.nextToken();
	if (qualifier.equals("-r")) 
		rec = parseRR(st, defaultClass, 0);
	else if (qualifier.equals("-s"))
		rec = parseSet(st, DClass.ANY);
	else {
		System.out.println("qualifier " + qualifier + " not supported");
		return;
	}
	if (rec != null) {
		query.addRecord(PREREQ, rec);
		System.out.println(rec);
	}
}
</source>
<source file="/Volumes/Data/auni_home/test_systems/dnsjava/dnsjava-0-3/util.java" startline="45" endline="50" key="MultiKey[6, 22]">
public void
addUDP(final short port) {
	Thread t;
	t = new Thread(new Runnable() {public void run() {serveTCP(port);}});
	t.start();
}
</source>