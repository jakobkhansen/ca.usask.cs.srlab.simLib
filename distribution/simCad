#!/bin/bash 
# Generic simCad extract and find clones script

usage() {
    echo "Usage: simCad granularity language simthreshold source-dir [outpot-dir] [ rename ]"
    echo "          where granularity   is one of:  { functions blocks }"
    echo "          and   language      is one of:  { c java cs py }"
    echo "          and   simthreshold  is one of:  { 0 to 13 }"
    echo "          and   rename        is one of:  { blind consistent }"
    echo ""
}


if [ "$1" = "-version" ]
then
    echo "SimCad v1.1 (10 December 2011)"
exit 0
fi

echo ""
echo "SimCad Clone Detector v1.1 (10 December 2011)"
echo ""

pwd

# check we have TXL
txlversion=`txl -V 2>&1 | grep 10.5`
if [ "${txlversion}" = "" ]
then
    echo "*** Error:  simCad requires FreeTXL 10.5"
    echo ""
    exit 99
fi


# check we have java
javaversion=`java -version 2>&1 | grep 'java version \"1.'`
if [ "${javaversion}" = "" ]
then
    echo "*** Error:  simCad requires Java 1.5 or higher"
    echo ""
    exit 99
fi


lib=.


if [ ! -d ${lib}/tools ]
then
    echo "*** Error:  cannot find simCad installation ${lib}"
    echo ""
    exit 99
fi
 
# check we compiled the tools
if [ ! -x ${lib}/tools/streamprocess.x ]
then
    echo "*** Error:  Missing ${lib}/tools/streamprocess.x - type 'make' to make the simCad tools"
    echo ""
    exit 99
fi

# check granularity
if [ "$1" = "functions" ] || [ "$1" = "blocks" ]
then
    granularity=$1
    shift
else
    usage
    exit 99
fi

# check language
if [ "$1" = "c" ] || [ "$1" = "java" ] || [ "$1" = "cs" ] || [ "$1" = "py" ] || [ "$1" = "wsdl" ]
then
    language=$1
    shift
else
    usage
    exit 99
fi

# check simthreshold
if [ -n "$1" ] && [ ! -d "$1" ] && [ "$1" -ge 0 ] && [ "$1" -le 13 ]
then
    simthreshold=$1
    shift
else
    usage
    exit 99
fi

# check we have a system directory
if [ -d "$1" ]
then
    system=$1
    shift
else
    usage
    exit 99
fi

#check output_dir
if [ "$1" = "." ] || [ "$1" = "" ]
then 
    outpot_dir=${system}/.simcad
    if [ ! -d "${outpot_dir}" ]
    then
    mkdir -p ${outpot_dir}
    chmod +rw ${outpot_dir} 
    fi
    shift
echo "gotcha ${outpot_dir}"
else
    if [ -d "$1" ]
    then
        outpot_dir=$1
    else
        mkdir -p 777 $1
    fi
    outpot_dir=$1
    shift
fi

result=$?
echo ""

if [ $result -gt 1 ]
then
    echo "*** ERROR: Can't create output directory ${outpot_dir}"
exit 99
fi

#check rename
if [ "$1" = "" ]
then 
    rename=none
else
    if [ "$1" = "blind" ] || [ "$1" = "consistent" ]
    then
        rename=$1
	shift
    else
        usage
        exit 99
    fi
fi

echo "system=${system}"
echo "granularity=${granularity}"
echo "language=${language}"
echo "simthreshold=${simthreshold}"
echo "outpot-dir=${outpot_dir}"
echo "rename=${rename}"
echo ""


# Check we have a system
if [ ! -d "${system}" ]
then
    echo "*** ERROR: Can't find system source directory ${system}"
    exit 99
fi

# Extract potential clones
date
datestamp=`date +%F-%T`
echo ""

checklog=1


if [ -s "${outpot_dir}/${granularity}.xml" ]
then
    echo "Using previously extracted ${granularity} from ${language} files in ${outpot_dir}"
    #echo > ${outpot_dir}/${granularity}-${datestamp}.log 2>&1
    checklog=0
else
    echo "Extracting ${granularity} from ${language} files in ${outpot_dir}"
    #echo "EXECUTING [${lib}/scripts/Extract ${granularity} ${language} ${system}]"
    time ${lib}/scripts/Extract ${granularity} ${language} ${system} > ${outpot_dir}/${granularity}-${datestamp}.log 2>&1
fi

result=$?
echo ""

if [ $result -ge 99 ]
then
    echo "*** ERROR: Extraction failed, code $result"
    echo "Detailed log in ${outpot_dir}/${granularity}-${datestamp}.log"
    echo ""
    exit 99
fi


# Check for parsing problems
if [ ${checklog} = 1 ]
then
 syntaxerrors=`(grep "TXL019[12]E" ${outpot_dir}/${granularity}-${datestamp}.log | wc -l)`
 if [ ${syntaxerrors} != 0 ]
 then
    if [ ${syntaxerrors} = 1 ]
    then
	echo "*** Warning: 1 source file failed to parse"
    else
	echo "*** Warning: ${syntaxerrors} source files failed to parse"
    fi
    echo ""
 fi
fi

npcs=`grep "^<source " ${outpot_dir}/${granularity}.xml | wc -l`
echo "Extracted ${npcs} ${granularity}"
echo ""

pcfile=${outpot_dir}/${granularity}

# Check for renaming to be done
if [ ${rename} != none ]
then
    if [ -s "${pcfile}-${rename}.xml" ]
    then
	echo "Using previously ${rename} renamed extracted ${granularity} from ${language} files in ${system}"
    else
	echo "Applying ${rename} renaming to extracted ${granularity} from ${language} files in ${system}"
	time ${lib}/scripts/Rename ${granularity} ${language} ${pcfile}.xml ${rename} >> ${outpot_dir}/${granularity}-${datestamp}.log 2>&1
    fi

    result=$?
    echo ""

    if [ $result != 0 ]
    then
        echo "*** ERROR: Renaming failed, code $result"
        echo "Detailed log in ${outpot_dir}/${granularity}-${datestamp}.log"
        echo ""
        exit 99
    fi

    pcfile=${pcfile}-${rename}
fi

#Detect Clone
echo "Detecting Clones..."
echo ""
echo "java -jar ${lib}/tools/simCad.jar ${outpot_dir} ${granularity} ${simthreshold} ${rename}"

java -jar ${lib}/tools/simCad.jar ${outpot_dir} ${granularity} ${simthreshold} ${rename} 2>&1


echo ""
date
echo ""
